#!/bin/bash
### BEGIN INIT INFO
# Provides:          loginvsid
# Required-Start:    
# Required-Stop:     
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: loginvsid
# Description:       loginvsid
### END INIT INFO
SWARM="{{SWARM}}"

start() {
  cd /loginvsi
  export fqdn=$(hostname).$(domainname)
  docker run -d -p 9000:9000 -v /loginvsi/img:/images -v /certificates:/certs -v /var/run/docker.sock:/var/run/docker.sock -v /opt/portainer:/data --name portainer portainer/portainer --ssl --sslkey /certs/${fqdn}.key.un --sslcert /certs/${fqdn}.crt --admin-password '{{ADMIN_PASS}}' -H unix:///var/run/docker.sock
  if [ $SWARM != "true" ]; then
    export $(cat .env); docker stack deploy --resolve-image never --compose-file ./docker-compose.yml VSI &>/dev/null
    sleep 5 &>/dev/null
    TOTAL=$(docker stack services VSI --format "{{.Replicas}}" | wc -l)
  else
    docker-compose up -d
    sleep 5 &>/dev/null
    TOTAL=$(docker ps -qa -f name=loginvsi_ | wc -l)
  fi
  
  MAXCOUNT=600
  COUNT=0
  while [ $COUNT -le $MAXCOUNT ];
  do    
    COUNT=$((COUNT+1))
    if [ $SWARM != "true" ]; then
      RUNNING=$(docker ps -q -f name=loginvsi_ -f status=running | wc -l)
    else
      RUNNING=$(docker stack services VSI --format "{{.Replicas}}" | grep "1/1" | wc -l)
    fi
    if [ $TOTAL -eq $RUNNING ]; then
      printf "Starting LoginVSI services: \e[32m[DONE]\e[39m \r\n" 
      DONE="true" 
      break
    else
      printf "Starting LoginVSI services: \e[36m[%s]\e[39m:\r\n" "$RUNNING/$TOTAL"
    fi
    sleep 1 &>/dev/null  
  done
  if [ -z $DONE ]; then
    echo "Starting services timedout after $MAXCOUNT seconds"
  fi
}

stop() { 
  printf "Stopping LoginVSI services \r\n"
  #docker stop $(docker ps -qf name=VSI_) &>/dev/null    
  #printf "Stopping LoginVSI services: \e[32m[DONE]\e[39m \r\n"
}

restart() {
  stop
  start
}

update() {
  cd /loginvsi
  #wget #URL to download latest yml from
  #docker rmi $(docker image ls loginvsi/* -q)
  #export $(cat .env); docker stack deploy --compose-file ./docker-compose.yml VSI &>/dev/null
}

case $1 in
  start|stop|restart|update) "$1" ;;
esac