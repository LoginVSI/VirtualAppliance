#!/bin/bash

# add first_run script
netadapter=$(ip -o addr show up primary scope global | while read -r num dev fam addr rest; do 
        if [[ ${dev} != docker* && ${dev} != br-* ]]; then
            echo ${dev%/*}; 
        fi     
    done
    )
ip=$(ip -o addr show $netadapter primary scope global | while read -r num dev fam addr rest; do 
        if [[ ${dev} != docker* ]]; then
            echo ${addr%/*}; 
        fi       
    done
    )
gateway=$(ip -o route list | grep default | while read -r default via gateway dev net; do echo $gateway;done )
netmask=$(ifconfig $netadapter | sed -rn '2s/ .*:(.*)$/\1/p')
nameserversarray=$(cat /etc/resolv.conf | grep -i nameserver|head -n2|cut -d ' ' -f2)
nameservers=$(echo $(echo "${nameserversarray[@]}"))
broadcast=$(ip a s dev $netadapter | awk '/inet / {print $4}')
dnssuffix=$(grep search /etc/resolv.conf | while read -r search suffix; do echo $suffix;done )
if [ ! -f "/loginvsi/first_run.chk" ]; then
trap 'echo "You cannot cancel this script"' SIGINT
    # check for interactive shell
    if ! grep -q "noninteractive" /proc/cmdline ; then
        stty sane

        # ask questions
        echo "Welcome to LoginVSI Soon!(tm)"
        echo "Please help answer the following questions to get the system setup..."
        
        read -ep " Please enter your preferred hostname ($(hostname)):" new_hostname        
        read -ep " Please enter your preferred domain (local):" new_domain        
        read -ep " Please choose a network configuration mode dhcp or static (D/s) " network
        case $network in
            s|S)
                
                echo "Configuring network using static address..."
                read -ep " Please provide the new ip address ($ip): " new_ip
                read -ep " Please provide the netmask ($netmask): " new_netmask
                read -ep " Please provide the default gateway ($gateway): " new_gateway
                read -ep " Please provide the nameservers ($nameservers) " new_nameservers
                read -ep " Please provide the dns search suffix ($new_domain) " new_dnssuffix
                read -ep " Please provide the broadcast address ($broadcast) " new_broadcast

                [[ -z "$new_dnssuffix" ]] && new_dnssuffix=$new_domain
                [[ ! -z "$new_ip" ]] && ip=$new_ip                                
                [[ ! -z "$new_netmask" ]] && netmask=$new_netmask
                [[ ! -z "$new_gateway" ]] && gateway=$new_gateway
                [[ ! -z "$new_nameservers" ]] && nameservers=$new_nameservers
                
                [[ ! -z "$new_dnssuffix" ]] && dnssuffix=$new_dnssuffix
                [[ ! -z "$new_broadcast" ]] && broadcast=$new_broadcast
                
                
                echo "
# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

source /etc/network/interfaces.d/*

# The loopback network interface
auto lo
iface lo inet loopback

# The primary network interface
auto $netadapter
iface $netadapter inet static        
    address $ip
    netmask $netmask
    gateway $gateway
    dns-search $dnssuffix
    dns-nameservers $nameservers
                " > /etc/network/interfaces
                ;;
            *)
                echo "Configuring network using dhcp..."
               echo "
# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

source /etc/network/interfaces.d/*

# The loopback network interface
auto lo
iface lo inet loopback

# The primary network interface
auto $netadapter
iface $netadapter inet dhcp        
    " > /etc/network/interfaces
      ;;
        esac

        while :       
        do        
            read -ersp " Please enter a new password for administrator: " password
            read -ersp " Please confirm the new password: " password2
            if [ $password != $password2 ]; then
                echo "Passwords do not match, try again..."
            else
                echo "administrator:$password" | chpasswd
                echo "Password updated successfully"
                break
            fi
        done
    fi

    # print status message
    echo "Preparing your server; this may take a few minutes and will restart the server..."

    # set fqdn
     [[ -z $new_hostname ]] && new_hostname=$(hostname)
     [[ -z $new_domain ]] && new_domain="local"
    export fqdn="$new_hostname.$new_domain"    
    echo " Setting fqdn: $fqdn"
    
    echo " Setting hostname: $new_hostname"
    # update hostname
    echo "$new_hostname" > /etc/hostname
    echo "kernel.domainname=$new_domain" >>/etc/sysctl.conf
    sed -i "s@loginvsi-ng.loginvsi-ng@$fqdn@g" /etc/hosts
    sed -i "s@loginvsi-ng@$new_hostname@g" /etc/hosts
    
    hostname "$new_hostname"


    rm /etc/ssh/ssh_host_*
    dpkg-reconfigure openssh-server &>/dev/null
    /etc/init.d/ssh restart &>/dev/null
    mkdir /certificates
    
    openssl genrsa -out /certificates/certificate.key 2048 -noout -passout pass:foobar &>/dev/null
    openssl req -new -sha256 -key /certificates/certificate.key -out /certificates/csr.csr -subj "/C=NL/ST=NH/L=Amsterdam/O=LoginVSI/OU=Development/CN=${fqdn}/emailAddress=info@loginvsi.com" -batch
    openssl req -x509 -sha256 -days 999999 -key /certificates/certificate.key -in /certificates/csr.csr -out /certificates/certificate.crt -passin pass:foobar
    #openssl req -in /certifcates/csr.csr -text -noout | grep -i "Signature.*SHA256" && echo "All is well" || echo "This certificate will stop working in 2017! You must update OpenSSL to generate a widely-compatible certificate"


    docker swarm init &>/dev/null
    echo "foobar" | docker secret create VSI_SSL_CERTIFICATE_KEY_PASSWORD - &>/dev/null


    chmod +x /usr/bin/loginvsid
    chown root:root /usr/bin/loginvsid

    echo "SSL_CERTIFICATE_KEY_PATH=/certificates/certificate.key" >/loginvsi/.env
    echo "SSL_CERTIFICATE_PATH=/certificates/certificate.crt" >>/loginvsi/.env
    echo "GATEWAY_PORT=443" >>/loginvsi/.env
    echo "HOST_URL=https:${fqdn}" >>/loginvsi/.env

    #sed -i s,GATEWAY_PORT=3000,GATEWAY_PORT=443, /loginvsi/.env
    #sed -i s,HOST_URL=https://localhost.loginvsi.com:3000,HOST_URL=https://${fqdn},  /loginvsi/.env
    #sed -i s,SSL_CERTIFICATE_KEY_PATH=..\\..\\..\\Certificates\\certificate.key,SSL_CERTIFICATE_KEY_PATH=/certifcates/certificate.key, /loginvsi/.env
    #sed -i s,SSL_CERTIFICATE_PATH=..\..\..\Certificates\certificate.crt,SSL_CERTIFICATE_PATH=/certifcates/certificate.crt, /loginvsi/.env
    systemctl enable loginvsid &>/dev/null
    touch -f /loginvsi/first_run.chk
	passwd -dl root &>/dev/null
    head -n -2 /etc/issue > /etc/issue.tmp; mv /etc/issue.tmp /etc/issue
    echo "   
    Welcome to Login VSI Soon(tm)
    Login VSI appliance is configured!
    Please use your browser to go to https://\4{$netadapter} or https://\n.\o 
    "  > /etc/issue
    update-grub &>/dev/null
  
trap SIGINT

reboot    
   
fi