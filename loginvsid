#!/bin/bash
### BEGIN INIT INFO
# Provides:          loginvsid
# Required-Start:    
# Required-Stop:     
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: loginvsid
# Description:       loginvsid
### END INIT INFO
SWARM="{{SWARM}}"

start() {
  export fqdn=$(hostname).$(domainname)
  cd /loginvsi
  if [ ! -z $(docker ps -a -f name=portainer --format "{{.Image}}") ]; then
    echo "Portainer container already exists, not recreating.."
  else
    ADMINPASS='{{ADMIN_PASS}}'
    docker run -d -p 9000:9000 --restart=always -v /loginvsi/img:/images -v /certificates:/certs -v /var/run/docker.sock:/var/run/docker.sock -v /opt/portainer:/data --name portainer portainer/portainer --ssl --sslkey /certs/${fqdn}.key.un --sslcert /certs/${fqdn}.crt --admin-password $ADMINPASS -H unix:///var/run/docker.sock  
  fi
  sed -i '/ALLOWED_CLIENT_URLS=/d' /loginvsi/.env
  echo ALLOWED_CLIENT_URLS=https://$(hostname).$(domainname) >>/loginvsi/.env
  if [ $SWARM == "true" ]; then
    export $(cat .env); docker stack deploy --resolve-image never --compose-file ./docker-compose.yml VSI &>/dev/null
    sleep 5 &>/dev/null
    TOTAL=$(docker stack services VSI --format "{{.Replicas}}" | wc -l)
  else
    docker-compose up -d
    sleep 5 &>/dev/null
    TOTAL=$(docker ps -qa -f name=loginvsi_ | wc -l)
  fi
  
  MAXCOUNT=30
  COUNT=0
  while [ $COUNT -le $MAXCOUNT ];
  do    
    COUNT=$((COUNT+1))
    if [ $SWARM != "true" ]; then
      RUNNING=$(docker ps -q -f name=loginvsi_ -f status=running | wc -l)
    else
      RUNNING=$(docker stack services VSI --format "{{.Replicas}}" | grep "1/1" | wc -l)
    fi
    if [ $TOTAL -eq $RUNNING ]; then
      printf "Starting LoginVSI services: \e[32m[DONE]\e[39m \r\n" 
      DONE="true" 
      break
    else
      printf "Starting LoginVSI services: \e[36m[%s]\e[39m:\r\n" "$RUNNING/$TOTAL"
    fi
    sleep 30 &>/dev/null  
  done
  if [ -z $DONE ]; then
    echo "Starting services timedout after $MAXCOUNT seconds"
  else
    echo "Copying CA.crt to contentDelivery..."
    services=$(docker service ps -q VSI_contentdelivery)
    for f in $services; do
      node=$(docker inspect --format "{{.NodeID}}" $f)
      container=$(docker inspect --format "{{.Status.ContainerStatus.ContainerID}}" $f)
      docker cp /certificates/CA.crt $container:/app/wwwroot/content
    done
  fi
}

stop() { 
  printf "Stopping LoginVSI services \r\n"
  #docker stop $(docker ps -qf name=VSI_) &>/dev/null    
  #printf "Stopping LoginVSI services: \e[32m[DONE]\e[39m \r\n"
}

restart() {
  stop
  start
}

status() {
   if [ $SWARM != "true" ]; then
      docker ps -a -f name=loginvsi_
    else
      docker service ls -f name=VSI_
    fi
}

update() {
  cd /loginvsi
  # Get the hosting and appliance repo's
  git clone https://github.com/LoginVSI/VirtualAppliance.git update
  git clone -b stable https://github.com/LoginVSI/Hosting.git hosting
  # copy latest compose file from hosting
  cp -f hosting/latest/Production/InternalDB/docker-compose.yml /loginvsi
  
  #copy latest loginvsi folder
  cp -f -r update/loginvsi/* /loginvsi/

  # copy loginvsid.service and loginvsid
  cp -f update/loginvsid /usr/bin/
  cp -f update/loginvsid.service /etc/systemd/system/
  
  chmod +x /usr/bin/loginvsid
  chown root:root /usr/bin/loginvsid
  systemctl disable loginvsid &>/dev/null
  systemctl enable loginvsid &>/dev/null

  # Check if any new entries in new .env and add them to the current .env
  for i in $(diff -y hosting/latest/Production/InternalDB/.env .env | grep ">" | cut -d ">" -f2 | xargs); do
    echo $i >> .env
  done

  # create new db folders if needed
   for f in $(cat /loginvsi/docker-compose.yml | grep "{DB_ROOT}")
    do 
        folder=$(echo $f | cut -d"-" -f2 | cut -d"/" -f2 | cut -d":" -f1) 
        if [ ! -z $folder ]; then
          if [ ! -d /loginvsi/data/$folder ]; then        
              mkdir /loginvsi/data/$folder; 
          fi
        fi
    done

  # pull the new images from dockerhub
  echo $(cat /root/.play) | base64 -d | docker login -u vsiplayaccount --password-stdin
  docker-compose pull 2>&1
  docker logout 2>&1
  # start the stack (will update containers automatically)
  start

}

case $1 in
  start|stop|restart|update|status) "$1" ;;
esac